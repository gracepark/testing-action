name: 'Update FR Issue with Incidents'

on: workflow_dispatch

jobs:
  update-fr-issue:
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      issues: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get current date and time
        id: datetime
        run: |
          CURRENT_DATE_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "Current date and time: $CURRENT_DATE_TIME"
          echo "DATE_TIME=$CURRENT_DATE_TIME" >> $GITHUB_ENV
          PAST_DATE_TIME=$(date -u -d "$CURRENT_DATE_TIME - 10 minutes" +"%Y-%m-%dT%H:%M:%SZ")
          echo "Date and time 10 minutes ago: $PAST_DATE_TIME"
          echo "PAST_DATE_TIME=$PAST_DATE_TIME" >> $GITHUB_ENV

      - name: Get incidents list
        id: get-incidents
        uses: gracepark/pagerduty-incidents-action@96fe82aba34b1d0d60a5c70ae160ebcb80b6d1b3
        with:
          pagerduty_token: y_NbAkKc66ryYTWUXYEu # test token
          team_id: 'P3XDFGJ'  # test team ID
          date_range: 'all'
          start_time: ${{ env.CURRENT_DATE_TIME }}  # Stxart of time range (ISO format)
          end_time: ${{ env.PAST_DATE_TIME }}  # End of time range (ISO format)
      
      - name: Format incidents as Markdown table
        if: ${{ steps.get-incidents.outputs.incident_count > 0 }}
        id: format-table
        run: |
          INCIDENTS='${{steps.get-incidents.outputs.incidents}}'
          TABLE=$(echo "$INCIDENTS" | jq -r '
            ["Incident Number", "Title", "Description", "Created At", "Updated At", "Status"] as $headers
            | $headers, (.[] | [.incident_number, .title, .description, .created_at, .updated_at, .status])
            | @tsv' | awk '
          BEGIN {
            header[1] = "Incident Number"
            header[2] = "Title"
            header[3] = "Description"
            header[4] = "Created At"
            header[5] = "Updated At"
            header[6] = "Status"
            width[1] = length(header[1])
            width[2] = length(header[2])
            width[3] = length(header[3])
            width[4] = length(header[4])
            width[5] = length(header[5])
            width[6] = length(header[6])

            # Read and process input
            while (getline > 0) {
              split($0, fields, "\t")
              for (i = 1; i <= 6; i++) {
                if (length(fields[i]) > width[i]) {
                  width[i] = length(fields[i])
                }
              }
              data[NR] = $0
            }
            # Print header row
            printf "| %-*s | %-*s | %-*s | %-*s | %-*s | %-*s |\n", width[1], header[1], width[2], header[2], width[3], header[3], width[4], header[4], width[5], header[5], width[6], header[6]
            
            # Print separator row based on the calculated widths
            separator = "|"
            for (i = 1; i <= 6; i++) {
              separator = separator sprintf("%s", substr("-------------------------------------------------", 1, width[i] + 2)) "|"
            }
            print separator

            # Print data rows
            for (i = 2; i <= NR; i++) {
              split(data[i], fields, "\t")
              printf "| %-*s | %-*s | %-*s | %-*s | %-*s | %-*s |\n", width[1], fields[1], width[2], fields[2], width[3], fields[3], width[4], fields[4], width[5], fields[5], width[6], fields[6]
            }
          }')

          echo "markdown_table<<EOF" >> $GITHUB_ENV
          echo "$TABLE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Find FR Issue
        id: find-fr-issue
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
        with: 
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: json
          script: |
            try {
              const issues = await github.rest.issues.listForRepo({
                  owner: 'gracepark',
                  repo: 'testing-action',
                  labels: 'epic,on track',
                  state: 'open',
                })
              const currentIssue = issues.data.find(issue => issue.title.includes('First Responder Work'))
              console.log(currentIssue.number)
              return currentIssue ? currentIssue.number : ''
            } catch (error) {
              console.log(error.message)
              console.error(error)
            }
      
      - name: Find comment if it exists
        uses: peter-evans/find-comment@3eae4d37986fb5a8592848f6a574fdf654e61f9e
        id: existing-comment
        with:
          issue-number: ${{ steps.find-fr-issue.outputs.result }}
          body-regex: '^.*New incidents.*$'
          comment-author: github-actions
    
      - run: |
          echo ${{ steps.existing-comment.outputs.comment-id }}

      - name: Add comment to FR issue
        if: ${{ steps.get-incidents.outputs.incident_count > 0 && steps.find-fr-issue.outputs.result != '' && steps.existing-comment.outputs.comment-id == '' }}
        uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043
        with:
          issue-number: ${{ steps.find-fr-issue.outputs.result }}
          body: |
            ## New Incidents
            There are ${{ steps.get-incidents.outputs.incident_count }} incidents in the last 10 minutes. Please view the incidents below:

            ${{ env.markdown_table }}"
      
      - name: Update comment on FR issue
        if: ${{ steps.get-incidents.outputs.incident_count > 0 && steps.find-fr-issue.outputs.result != '' && steps.existing-comment.outputs.comment-id != '' }}
        uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043
        with:
          issue-number: ${{ steps.existing-comment.outputs.comment-id }}
          comment-id: ${{ steps.existing-comment.outputs.comment-id }}
          body: |
            ## New Incidents
            There are ${{ steps.get-incidents.outputs.incident_count }} incidents in the last 10 minutes. Please view the incidents below:

            ${{ env.markdown_table }}"

